package rnikolaus.md5summer;

import java.awt.HeadlessException;
import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author rapnik
 */
public class MainGui extends javax.swing.JFrame {

    private static HashCodeCalculatorVisitor hashCodeCalculator;

    /**
     * Creates new form MainForm
     */
    public MainGui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        streamTextArea1 = new rnikolaus.md5summer.StreamTextArea();
        jProgressBar1 = new javax.swing.JProgressBar();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        findChanged = new javax.swing.JMenuItem();
        findAdded = new javax.swing.JMenuItem();
        findDeleted = new javax.swing.JMenuItem();
        loadResultMenuItem = new javax.swing.JMenuItem();
        createChecksumsMenuItem = new javax.swing.JMenuItem();
        saveToResultMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        streamTextArea1.setColumns(20);
        streamTextArea1.setRows(5);
        streamTextArea1.setFont(new java.awt.Font("Consolas", 0, 10)); // NOI18N
        jScrollPane1.setViewportView(streamTextArea1);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(244, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(254, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE))
        );
        jLayeredPane1.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jProgressBar1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        findChanged.setMnemonic('o');
        findChanged.setText("Find changed");
        findChanged.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findChangedActionPerformed(evt);
            }
        });
        fileMenu.add(findChanged);

        findAdded.setText("Find added");
        findAdded.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findAddedActionPerformed(evt);
            }
        });
        fileMenu.add(findAdded);

        findDeleted.setText("Find deleted");
        findDeleted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findDeletedActionPerformed(evt);
            }
        });
        fileMenu.add(findDeleted);

        loadResultMenuItem.setMnemonic('s');
        loadResultMenuItem.setText("Load result File");
        loadResultMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadResultMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadResultMenuItem);

        createChecksumsMenuItem.setMnemonic('a');
        createChecksumsMenuItem.setText("Create checksums");
        createChecksumsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createChecksumsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(createChecksumsMenuItem);

        saveToResultMenuItem.setText("Save result file");
        saveToResultMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToResultMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveToResultMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLayeredPane1)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void saveToResultMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToResultMenuItemActionPerformed
        //stopProcessing();
        final JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileNameExtensionFilter f = new FileNameExtensionFilter("MD5 Files", "md5");
        fc.setFileFilter(f);
        int returnVal = fc.showSaveDialog(this);
        if (returnVal != JFileChooser.APPROVE_OPTION) {
            return;
        }
         Path fileToSave = fc.getSelectedFile().toPath();
        final String pathString = fileToSave.toString();
         if (!pathString.toLowerCase().endsWith(".md5")){
             fileToSave = Paths.get(pathString+".md5" );
         }
        try (
                BufferedWriter bw = Files.newBufferedWriter(fileToSave,Charset.defaultCharset(), 
                        StandardOpenOption.CREATE_NEW);
                ){
            bw.append(streamTextArea1.getText());
        } catch (IOException ex) {
            Logger.getLogger(HashCodeCalculatorUtils.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_saveToResultMenuItemActionPerformed

    private void findChangedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findChangedActionPerformed
        final Map<String, String> loadFromTextArea = loadFromTextArea();
        stopProcessing();
        Map<String, String> readMap = loadMapFromFile();
        if (readMap!=null)displayResult(getChanged(readMap, loadFromTextArea));
    }//GEN-LAST:event_findChangedActionPerformed

    /**
     * displays a filechooser and loads the result into a map.
     * 
     * @return a map or null if unsuccessful
     */
    public Map<String, String> loadMapFromFile() {
        final JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileNameExtensionFilter f = new FileNameExtensionFilter("MD5 Files", "md5");
        fc.setFileFilter(f);
        int returnVal = fc.showOpenDialog(this);
        if (returnVal != JFileChooser.APPROVE_OPTION) {
            return null;
        }
        final Map<String, String> readMap = readMap(fc.getSelectedFile().toPath());
        return readMap;
    }

    public Map<String, String> loadFromTextArea() {
        StringTokenizer st = new StringTokenizer(streamTextArea1.getText(), "\n");
        List<String> lines = new ArrayList<>();
        while (st.hasMoreElements()){
            String line = st.nextToken();
            lines.add(line);
        }
        Map<String,String> newMap = parseHashes(lines);
        return newMap;
    }

    private void createChecksumsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createChecksumsMenuItemActionPerformed
        final JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showOpenDialog(this);
        if (returnVal != JFileChooser.APPROVE_OPTION) {
            return;
        }
        jLayeredPane1.moveToFront(jProgressBar1);
        jProgressBar1.setIndeterminate(true);
        Thread t = new Thread(new Runnable() {

            @Override
            public void run() {
                calculateHashCodes(fc.getSelectedFile().toPath(), streamTextArea1.getOutputStream());
                JOptionPane.showMessageDialog(streamTextArea1, "Md5 calculation finished, please consider saving the result");
                SwingUtilities.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                       jLayeredPane1.moveToBack(jProgressBar1);
                    }
                });
            }
        });
        t.start();

    }//GEN-LAST:event_createChecksumsMenuItemActionPerformed

    private void loadResultMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadResultMenuItemActionPerformed
        stopProcessing();
        Map<String,String> stuff = loadMapFromFile();
        if (stuff!=null)displayResult(stuff);

    }//GEN-LAST:event_loadResultMenuItemActionPerformed

    private void findAddedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findAddedActionPerformed
        final Map<String, String> loadFromTextArea = loadFromTextArea();
        stopProcessing();
        Map<String, String> readMap = loadMapFromFile();
        if (readMap!=null)displayResult(getCreated(readMap, loadFromTextArea));
    }//GEN-LAST:event_findAddedActionPerformed

    private void findDeletedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findDeletedActionPerformed
        final Map<String, String> loadFromTextArea = loadFromTextArea();
        stopProcessing();
        Map<String, String> readMap = loadMapFromFile();
        if (readMap!=null)displayResult(getDeleted(readMap, loadFromTextArea));
    }//GEN-LAST:event_findDeletedActionPerformed

    public void displayResult(final Map<String,String> fc) {
        streamTextArea1.setText("");
        PrintStream os = new PrintStream(streamTextArea1.getOutputStream());
        for (Map.Entry<String, String> e : fc.entrySet()) {
            os.println(e.getValue()+ " " + e.getKey());
        }
    }

    public Map<String, String> calculateHashCodes(Path p, OutputStream os) {
        final PrintStream printStream = new PrintStream(os);
        stopProcessing();
        hashCodeCalculator = new HashCodeCalculatorVisitor(p, printStream);

        try {
            Files.walkFileTree(hashCodeCalculator.getStartPath(), hashCodeCalculator);
        } catch (IOException ex) {
            Logger.getLogger(HashCodeCalculatorUtils.class.getName()).log(Level.SEVERE, null, ex);
            printStream.println(ex);
        }
        return hashCodeCalculator.getResult();

    }

    public Map<String, String> readMap(Path file) {
        Map<String, String> result = new TreeMap<>();
        try {
            List<String> lines = Files.readAllLines(file,Charset.defaultCharset());
            return parseHashes(lines);
        } catch (IOException ex) {
            Logger.getLogger(HashCodeCalculatorUtils.class.getName()).log(Level.SEVERE, null, ex);
        }
        return result;
    }

    public Map<String, String> parseHashes(List<String> lines) {
        Map<String, String> result = new TreeMap<>();
        for (String line : lines) {
            StringTokenizer st = new StringTokenizer(line, " ");
            if (st.countTokens() < 2) {
                continue;
            }
            String hash = st.nextToken();
            String name = st.nextToken();
            while (st.hasMoreTokens()) {
                name += " " + st.nextToken();
            }
            result.put(name, hash);
        }
        return result;
    }

    public static void writeMap(Map<String, String> map, Path f) {

        List<String> x = new ArrayList<>();
        for (Map.Entry<String, String> e : map.entrySet()) {
            final String name = e.getValue() + " " + e.getKey();
            x.add(name);
        }

        try {
            Files.write(f, x,Charset.defaultCharset(), StandardOpenOption.CREATE_NEW);
        } catch (IOException ex) {
            Logger.getLogger(HashCodeCalculatorUtils.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public static Map<String, String> getNonExistant(Map<String, String> m1, Map<String, String> m2) {
        Map<String, String> result = new TreeMap<>();
        Set<String> paths = new TreeSet<>(m1.keySet());
        paths.removeAll(m2.keySet());
        for (String path : paths) {
            result.put(path, m1.get(path));
        }
        return result;
    }

    public  Map<String, String> getCreated(Map<String, String> oldMap, Map<String, String> newMap) {
        return getNonExistant(newMap, oldMap);
    }

    public  Map<String, String> getDeleted(Map<String, String> oldMap, Map<String, String> newMap) {
        return getNonExistant(oldMap, newMap);

    }

    public  Map<String, String> getChanged(Map<String, String> oldMap, Map<String, String> newMap) {
        Map<String, String> result = new TreeMap<>();
        Set<String> paths = new TreeSet<>(oldMap.keySet());
        paths.retainAll(newMap.keySet());
        for (String path : paths) {
            String hashCodeOld = oldMap.get(path);
            String hashCodeNew = newMap.get(path);
            if (!hashCodeOld.equals(hashCodeNew)) {
                result.put(path, hashCodeNew);
            }
        }
        return result;
    }


    public void stopProcessing() {
        if (hashCodeCalculator != null) {
            hashCodeCalculator.stop();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem createChecksumsMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem findAdded;
    private javax.swing.JMenuItem findChanged;
    private javax.swing.JMenuItem findDeleted;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem loadResultMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveToResultMenuItem;
    private rnikolaus.md5summer.StreamTextArea streamTextArea1;
    // End of variables declaration//GEN-END:variables

}
